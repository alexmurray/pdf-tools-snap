name: pdf-tools
base: core18
summary: Emacs support library for PDF files
description: |
 PDF Tools is, among other things, a replacement of DocView for PDF
 files. The key difference is that pages are not pre-rendered by
 e.g. ghostscript and stored in the file-system, but rather created
 on-demand and stored in memory.

 This rendering is performed by a special library named, for whatever
 reason, poppler, running inside a server program. This program is called
 epdfinfo and its job is to successively read requests from Emacs and
 produce the proper results, i.e. the PNG image of a PDF page.

 Actually, displaying PDF files is just one part of PDF Tools. Since
 poppler can provide us with all kinds of information about a document and
 is also able to modify it, there is a lot more we can do with it.

 Features

  - View
      - View PDF documents in a buffer with DocView-like bindings.
  - Isearch
      -  Interactively search PDF documents like any other buffer, either for a string or a PCRE.
  - Occur
      - List lines matching a string or regexp in one or more PDF documents.
  - Follow
      - Click on highlighted links, moving to some part of a different
        page, some external file, a website or any other URI. Links may
        also be followed by keyboard commands.
  - Annotations
      - Display and list text and markup annotations (like underline), edit
        their contents and attributes (e.g. color), move them around,
        delete them or create new ones and then save the modifications back
        to the PDF file.
  - Attachments
      - Save files attached to the PDF-file or list them in a dired buffer.
  - Outline
      - Use imenu or a special buffer to examine and navigate the PDF’s outline.
  - SyncTeX
      - Jump from a position on a page directly to the TeX source and vice versa.
  - Virtual
      - Use a collection of documents as if it were one, big single PDF.
  - Misc
      - Display PDF’s metadata.
      - Mark a region and kill the text from the PDF.
      - Keep track of visited pages via a history.
      - Apply a color filter for reading in low light conditions.

grade: devel # must be 'stable' to release into candidate/stable channels
confinement: strict
adopt-info: pdf-tools

apps:
  epdfinfo:
    command: epdfinfo
    plugs:
      - home

parts:
  tablist:
    plugin: nil
    source: https://github.com/politza/tablist
    source-type: git
    override-build: |
      cp -v *.el $SNAPCRAFT_STAGE
      snapcraftctl build
  pdf-tools:
    # See 'snapcraft plugins'
    plugin: autotools
    after: [tablist]
    source: https://github.com/politza/pdf-tools
    source-type: git
    source-subdir: server
    override-build: |
      # byte-compile emacs-lisp
      cp -r lisp/*.el $SNAPCRAFT_STAGE
      # fixups for snap-isms
      sed -i 's|"epdfinfo"|"pdf-tools.epdfinfo"|' $SNAPCRAFT_STAGE/pdf-info.el
      sed -i 's|\((make-temp-file ".*)\)|(let ((temporary-file-directory (expand-file-name "~/snap/pdf-tools/common/"))) \1)|' $SNAPCRAFT_STAGE/pdf-*.el
      emacs --batch -L $SNAPCRAFT_STAGE -f batch-byte-compile $SNAPCRAFT_STAGE/*.el
      # copy in emacs lisp as though it got built
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/share/emacs/site-lisp/pdf-tools/
      cp -v $SNAPCRAFT_STAGE/*.el* $SNAPCRAFT_PART_INSTALL/usr/share/emacs/site-lisp/pdf-tools/
      # build server
      snapcraftctl build
      snapcraftctl set-version "$(git describe --tags)"
    build-snaps:
      - emacs
    build-packages:
      - libpng-dev
      - zlib1g-dev
      - libpoppler-glib-dev
      - libpoppler-private-dev
    stage-packages:
      - libcairo2
      - libglib2.0-0
      - libpng16-16
      - libpoppler-glib8
      - libpoppler73
      - libsynctex1
